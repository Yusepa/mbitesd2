{"version":3,"file":"basewidget.min.js","sources":["../../src/searchwidget/basewidget.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A widget to search users or grade items within the gradebook.\r\n *\r\n * @module    core_grades/searchwidget/basewidget\r\n * @copyright 2022 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nimport {debounce} from 'core/utils';\r\nimport * as Templates from 'core/templates';\r\nimport * as Selectors from 'core_grades/searchwidget/selectors';\r\nimport Notification from 'core/notification';\r\n\r\n/**\r\n * Build the base searching widget.\r\n *\r\n * @method init\r\n * @param {HTMLElement} widgetContentContainer The selector for the widget container element.\r\n * @param {Promise} bodyPromise The promise from the callee of the contents to place in the widget container.\r\n * @param {Array} data An array of all the data generated by the callee.\r\n * @param {Function} searchFunc Partially applied function we need to manage search the passed dataset.\r\n * @param {string|null} unsearchableContent The content rendered in a non-searchable area.\r\n */\r\nexport const init = async(widgetContentContainer, bodyPromise, data, searchFunc, unsearchableContent = null) => {\r\n    bodyPromise.then(async(bodyContent) => {\r\n        // Render the body content.\r\n        widgetContentContainer.innerHTML = bodyContent;\r\n\r\n        // Render the unsearchable content if defined.\r\n        if (unsearchableContent) {\r\n            const unsearchableContentContainer = widgetContentContainer.querySelector(Selectors.regions.unsearchableContent);\r\n            unsearchableContentContainer.innerHTML += unsearchableContent;\r\n        }\r\n\r\n        const searchResultsContainer = widgetContentContainer.querySelector(Selectors.regions.searchResults);\r\n        // Display a loader until the search results are rendered.\r\n        await showLoader(searchResultsContainer);\r\n        // Render the search results.\r\n        await renderSearchResults(searchResultsContainer, data);\r\n\r\n        registerListenerEvents(widgetContentContainer, data, searchFunc);\r\n\r\n    }).catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Register the event listeners for the search widget.\r\n *\r\n * @method registerListenerEvents\r\n * @param {HTMLElement} widgetContentContainer The selector for the widget container element.\r\n * @param {Array} data An array of all the data generated by the callee.\r\n * @param {Function} searchFunc Partially applied function we need to manage search the passed dataset.\r\n */\r\nexport const registerListenerEvents = (widgetContentContainer, data, searchFunc) => {\r\n    const searchResultsContainer = widgetContentContainer.querySelector(Selectors.regions.searchResults);\r\n    const searchInput = widgetContentContainer.querySelector(Selectors.actions.search);\r\n    // We want to focus on the first known user interable element within the dropdown.\r\n    searchInput.focus();\r\n    const clearSearchButton = widgetContentContainer.querySelector(Selectors.actions.clearSearch);\r\n\r\n    // The search input is triggered.\r\n    searchInput.addEventListener('input', debounce(async() => {\r\n        // If search query is present display the 'clear search' button, otherwise hide it.\r\n        if (searchInput.value.length > 0) {\r\n            clearSearchButton.classList.remove('d-none');\r\n        } else {\r\n            clearSearchButton.classList.add('d-none');\r\n        }\r\n        // Display the search results.\r\n        await renderSearchResults(\r\n            searchResultsContainer,\r\n            debounceCallee(\r\n                searchInput.value,\r\n                data,\r\n                searchFunc()\r\n            )\r\n        );\r\n    }, 300));\r\n\r\n    // Clear search is triggered.\r\n    clearSearchButton.addEventListener('click', async(e) => {\r\n        e.stopPropagation();\r\n        // Clear the entered search query in the search bar.\r\n        searchInput.value = \"\";\r\n        searchInput.focus();\r\n        clearSearchButton.classList.add('d-none');\r\n\r\n        // Display all results.\r\n        await renderSearchResults(\r\n            searchResultsContainer,\r\n            debounceCallee(\r\n                searchInput.value,\r\n                data,\r\n                searchFunc()\r\n            )\r\n        );\r\n    });\r\n};\r\n\r\n/**\r\n * Renders the loading placeholder for the search widget.\r\n *\r\n * @method showLoader\r\n * @param {HTMLElement} container The DOM node where we'll render the loading placeholder.\r\n */\r\nexport const showLoader = async(container) => {\r\n    const {html, js} = await Templates.renderForPromise('core_grades/searchwidget/loading', {});\r\n    Templates.replaceNodeContents(container, html, js);\r\n};\r\n\r\n/**\r\n * We have a small helper that'll call the curried search function allowing callers to filter\r\n * the data set however we want rather than defining how data must be filtered.\r\n *\r\n * @method debounceCallee\r\n * @param {String} searchValue The input from the user that we'll search against.\r\n * @param {Array} data An array of all the data generated by the callee.\r\n * @param {Function} searchFunction Partially applied function we need to manage search the passed dataset.\r\n * @return {Array} The filtered subset of the provided data that we'll then render into the results.\r\n */\r\nconst debounceCallee = (searchValue, data, searchFunction) => {\r\n    if (searchValue.length > 0) { // Search query is present.\r\n        return searchFunction(data, searchValue);\r\n    }\r\n    return data;\r\n};\r\n\r\n/**\r\n * Given the output of the callers' search function, render out the results into the search results container.\r\n *\r\n * @method renderSearchResults\r\n * @param {HTMLElement} searchResultsContainer The DOM node of the widget where we'll render the provided results.\r\n * @param {Array} searchResultsData The filtered subset of the provided data that we'll then render into the results.\r\n */\r\nconst renderSearchResults = async(searchResultsContainer, searchResultsData) => {\r\n    const templateData = {\r\n        'searchresults': searchResultsData,\r\n    };\r\n    // Build up the html & js ready to place into the help section.\r\n    const {html, js} = await Templates.renderForPromise('core_grades/searchwidget/searchresults', templateData);\r\n    await Templates.replaceNodeContents(searchResultsContainer, html, js);\r\n};\r\n\r\n/**\r\n * We want to create the basic promises and hooks that the caller will implement, so we can build the search widget\r\n * ahead of time and allow the caller to resolve their promises once complete.\r\n *\r\n * @method promisesAndResolvers\r\n * @returns {{bodyPromise: Promise, bodyPromiseResolver}}\r\n */\r\nexport const promisesAndResolvers = () => {\r\n    // We want to show the widget instantly but loading whilst waiting for our data.\r\n    let bodyPromiseResolver;\r\n    const bodyPromise = new Promise(resolve => {\r\n        bodyPromiseResolver = resolve;\r\n    });\r\n\r\n    return {bodyPromiseResolver, bodyPromise};\r\n};\r\n"],"names":["async","widgetContentContainer","bodyPromise","data","searchFunc","unsearchableContent","then","innerHTML","bodyContent","querySelector","Selectors","regions","searchResultsContainer","searchResults","showLoader","renderSearchResults","registerListenerEvents","catch","Notification","exception","searchInput","actions","search","focus","clearSearchButton","clearSearch","addEventListener","value","length","classList","remove","add","debounceCallee","e","stopPropagation","html","js","Templates","renderForPromise","replaceNodeContents","container","searchValue","searchFunction","searchResultsData","templateData","bodyPromiseResolver","Promise","resolve"],"mappings":";;;;;;;gVAqCoBA,eAAMC,uBAAwBC,YAAaC,KAAMC,gBAAYC,2EAAsB,KACnGH,YAAYI,MAAKN,MAAAA,iBAEbC,uBAAuBM,UAAYC,YAG/BH,oBAAqB,CACgBJ,uBAAuBQ,cAAcC,UAAUC,QAAQN,qBAC/DE,WAAaF,0BAGxCO,uBAAyBX,uBAAuBQ,cAAcC,UAAUC,QAAQE,qBAEhFC,WAAWF,8BAEXG,oBAAoBH,uBAAwBT,MAElDa,uBAAuBf,uBAAwBE,KAAMC,eAEtDa,MAAMC,sBAAaC,kBAWbH,uBAAyB,CAACf,uBAAwBE,KAAMC,oBAC3DQ,uBAAyBX,uBAAuBQ,cAAcC,UAAUC,QAAQE,eAChFO,YAAcnB,uBAAuBQ,cAAcC,UAAUW,QAAQC,QAE3EF,YAAYG,cACNC,kBAAoBvB,uBAAuBQ,cAAcC,UAAUW,QAAQI,aAGjFL,YAAYM,iBAAiB,SAAS,oBAAS1B,UAEvCoB,YAAYO,MAAMC,OAAS,EAC3BJ,kBAAkBK,UAAUC,OAAO,UAEnCN,kBAAkBK,UAAUE,IAAI,gBAG9BhB,oBACFH,uBACAoB,eACIZ,YAAYO,MACZxB,KACAC,iBAGT,MAGHoB,kBAAkBE,iBAAiB,SAAS1B,MAAAA,IACxCiC,EAAEC,kBAEFd,YAAYO,MAAQ,GACpBP,YAAYG,QACZC,kBAAkBK,UAAUE,IAAI,gBAG1BhB,oBACFH,uBACAoB,eACIZ,YAAYO,MACZxB,KACAC,gFAYHU,WAAad,MAAAA,kBAChBmC,KAACA,KAADC,GAAOA,UAAYC,UAAUC,iBAAiB,mCAAoC,IACxFD,UAAUE,oBAAoBC,UAAWL,KAAMC,0CAa7CJ,eAAiB,CAACS,YAAatC,KAAMuC,iBACnCD,YAAYb,OAAS,EACdc,eAAevC,KAAMsC,aAEzBtC,KAULY,oBAAsBf,MAAMY,uBAAwB+B,2BAChDC,aAAe,eACAD,oBAGfR,KAACA,KAADC,GAAOA,UAAYC,UAAUC,iBAAiB,yCAA0CM,oBACxFP,UAAUE,oBAAoB3B,uBAAwBuB,KAAMC,mCAUlC,SAE5BS,0BACE3C,YAAc,IAAI4C,SAAQC,UAC5BF,oBAAsBE,iBAGnB,CAACF,oBAAAA,oBAAqB3C,YAAAA"}