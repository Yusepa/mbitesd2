{"version":3,"file":"repository.min.js","sources":["../../src/searchwidget/repository.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * A repo for the search widget.\r\n *\r\n * @module    core_grades/searchwidget/repository\r\n * @copyright 2022 Mathew May <mathew.solutions>\r\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport ajax from 'core/ajax';\r\n\r\n/**\r\n * Given a course ID, we want to fetch the enrolled learners, so we may fetch their reports.\r\n *\r\n * @method userFetch\r\n * @param {int} courseid ID of the course to fetch the users of.\r\n * @param {string} actionBaseUrl The base URL for the user option.\r\n * @param {int} groupId ID of the group to fetch the users of.\r\n * @return {object} jQuery promise\r\n */\r\nexport const userFetch = (courseid, actionBaseUrl, groupId) => {\r\n    const request = {\r\n        methodname: 'core_grades_get_enrolled_users_for_search_widget',\r\n        args: {\r\n            courseid: courseid,\r\n            actionbaseurl: actionBaseUrl,\r\n            groupid: groupId,\r\n        },\r\n    };\r\n    return ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Given a course ID, we want to fetch the groups, so we may fetch their users.\r\n *\r\n * @method groupFetch\r\n * @param {int} courseid ID of the course to fetch the users of.\r\n * @param {string} actionBaseUrl The base URL for the group action.\r\n * @return {object} jQuery promise\r\n */\r\nexport const groupFetch = (courseid, actionBaseUrl) => {\r\n    const request = {\r\n        methodname: 'core_grades_get_groups_for_search_widget',\r\n        args: {\r\n            courseid: courseid,\r\n            actionbaseurl: actionBaseUrl,\r\n        },\r\n    };\r\n    return ajax.call([request])[0];\r\n};\r\n\r\n/**\r\n * Given a course ID, we want to fetch the gradable items, so we may fetch reports based on activity items.\r\n * Note: This will be worked upon in the single view issue.\r\n *\r\n * @method gradeitemFetch\r\n * @param {int} courseid ID of the course to fetch the users of.\r\n * @return {object} jQuery promise\r\n */\r\nexport const gradeitemFetch = (courseid) => {\r\n    const request = {\r\n        methodname: 'gradereport_singleview_get_grade_items_for_search_widget',\r\n        args: {\r\n            courseid: courseid,\r\n        },\r\n    };\r\n    return ajax.call([request])[0];\r\n};\r\n"],"names":["courseid","actionBaseUrl","groupId","request","methodname","args","actionbaseurl","groupid","ajax","call"],"mappings":";;;;;;;0MAkCyB,CAACA,SAAUC,cAAeC,iBACzCC,QAAU,CACZC,WAAY,mDACZC,KAAM,CACFL,SAAUA,SACVM,cAAeL,cACfM,QAASL,iBAGVM,cAAKC,KAAK,CAACN,UAAU,wBAWN,CAACH,SAAUC,uBAC3BE,QAAU,CACZC,WAAY,2CACZC,KAAM,CACFL,SAAUA,SACVM,cAAeL,uBAGhBO,cAAKC,KAAK,CAACN,UAAU,4BAWDH,iBACrBG,QAAU,CACZC,WAAY,2DACZC,KAAM,CACFL,SAAUA,kBAGXQ,cAAKC,KAAK,CAACN,UAAU"}