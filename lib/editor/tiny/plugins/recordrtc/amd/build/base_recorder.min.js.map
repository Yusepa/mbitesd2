{"version":3,"file":"base_recorder.min.js","sources":["../src/base_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n//\r\n\r\n/**\r\n * Tiny Record RTC type.\r\n *\r\n * @module      tiny_recordrtc/recording/base\r\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {get_string as getString, get_strings as getStrings} from 'core/str';\r\nimport {component} from './common';\r\nimport Pending from 'core/pending';\r\nimport {getData} from './options';\r\nimport uploadFile from 'editor_tiny/uploader';\r\nimport {add as addToast} from 'core/toast';\r\nimport * as ModalEvents from 'core/modal_events';\r\nimport * as ModalFactory from 'core/modal_factory';\r\nimport * as Templates from 'core/templates';\r\nimport {saveCancelPromise} from 'core/notification';\r\nimport {prefetchStrings, prefetchTemplates} from 'core/prefetch';\r\n\r\n/**\r\n * The RecordRTC base class for audio, video, and any other future types\r\n */\r\nexport default class {\r\n\r\n    stopRequested = false;\r\n\r\n    /**\r\n     * Constructor for the RecordRTC class\r\n     *\r\n     * @param {TinyMCE} editor The Editor to which the content will be inserted\r\n     * @param {Modal} modal The Moodle Modal that contains the interface used for recording\r\n     */\r\n    constructor(editor, modal) {\r\n        this.ready = false;\r\n\r\n        if (!this.checkAndWarnAboutBrowserCompatibility()) {\r\n            return;\r\n        }\r\n\r\n        this.editor = editor;\r\n        this.config = getData(editor).params;\r\n        this.modal = modal;\r\n        this.modalRoot = modal.getRoot()[0];\r\n        this.startStopButton = this.modalRoot.querySelector('button[data-action=\"startstop\"]');\r\n        this.uploadButton = this.modalRoot.querySelector('button[data-action=\"upload\"]');\r\n\r\n        // Disable the record button untilt he stream is acquired.\r\n        this.setRecordButtonState(false);\r\n\r\n        this.player = this.configurePlayer();\r\n        this.registerEventListeners();\r\n        this.ready = true;\r\n\r\n        this.captureUserMedia();\r\n        this.prefetchContent();\r\n    }\r\n\r\n    /**\r\n     * Check whether the browser is compatible.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isReady() {\r\n        return this.ready;\r\n    }\r\n\r\n    // Disable eslint's valid-jsdoc rule as the following methods are abstract and mnust be overridden by the child class.\r\n\r\n    /* eslint-disable valid-jsdoc, no-unused-vars */\r\n\r\n    /**\r\n     * Get the Player element for this type.\r\n     *\r\n     * @returns {HTMLElement} The player element, typically an audio or video tag.\r\n     */\r\n    configurePlayer() {\r\n        throw new Error(`configurePlayer() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Get the list of supported mimetypes for this recorder.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/isTypeSupported}\r\n     *\r\n     * @returns {string[]} The list of supported mimetypes.\r\n     */\r\n    getSupportedTypes() {\r\n        throw new Error(`getSupportedTypes() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Get any recording options passed into the MediaRecorder.\r\n     * Please note that the mimeType will be fetched from {@link getSupportedTypes()}.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaRecorder/MediaRecorder#options}\r\n     * @returns {Object}\r\n     */\r\n    getRecordingOptions() {\r\n        throw new Error(`getRecordingOptions() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Get a filename for the generated file.\r\n     *\r\n     * Typically this function will take a prefix and add a type-specific suffix such as the extension to it.\r\n     *\r\n     * @param {string} prefix The prefix for the filename generated by the recorder.\r\n     * @returns {string}\r\n     */\r\n    getFileName(prefix) {\r\n        throw new Error(`getFileName() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Get a list of constraints as required by the getUserMedia() function.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#constraints}\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    getMediaConstraints() {\r\n        throw new Error(`getMediaConstraints() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Whether to start playing the recording as it is captured.\r\n     * @returns {boolean} Whether to start playing the recording as it is captured.\r\n     */\r\n    playOnCapture() {\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Get the time limit for this recording type.\r\n     *\r\n     * @returns {number} The time limit in seconds.\r\n     */\r\n    getTimeLimit() {\r\n        throw new Error(`getTimeLimit() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Get the name of the template used when embedding the URL in the editor content.\r\n     *\r\n     * @returns {string}\r\n     */\r\n    getEmbedTemplateName() {\r\n        throw new Error(`getEmbedTemplateName() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /**\r\n     * Fetch the Class of the Modal to be displayed.\r\n     *\r\n     * @returns {Modal}\r\n     */\r\n    static getModalClass() {\r\n        throw new Error(`getModalClass() must be implemented in ${this.constructor.name}`);\r\n    }\r\n\r\n    /* eslint-enable valid-jsdoc, no-unused-vars */\r\n\r\n    /**\r\n     * Get the options for the MediaRecorder.\r\n     *\r\n     * @returns {object} The options for the MediaRecorder instance.\r\n     */\r\n    getParsedRecordingOptions() {\r\n        const types = this.getSupportedTypes();\r\n        const options = this.getParsedRecordingOptions();\r\n        const compatTypes = types.filter((type) => window.MediaRecorder.isTypeSupported(type));\r\n\r\n        if (compatTypes.length !== 0) {\r\n            options.mimeType = compatTypes[0];\r\n        }\r\n\r\n        return options;\r\n    }\r\n\r\n    /**\r\n     * Start capturing the User Media and handle success or failure of the capture.\r\n     */\r\n    async captureUserMedia() {\r\n        try {\r\n            const stream = await navigator.mediaDevices.getUserMedia(this.getMediaConstraints());\r\n            this.handleCaptureSuccess(stream);\r\n        } catch (error) {\r\n            this.handleCaptureFailure(error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Prefetch some of the content that will be used in the UI.\r\n     *\r\n     * Note: not all of the strings used are pre-fetched.\r\n     * Some of the strings will be fetched because their template is used.\r\n     */\r\n    prefetchContent() {\r\n        prefetchStrings(component, [\r\n            'uploading',\r\n            'recordagain_title',\r\n            'recordagain_desc',\r\n            'discard_title',\r\n            'discard_desc',\r\n            'confirm_yes',\r\n            'recordinguploaded',\r\n            'maxfilesizehit',\r\n            'maxfilesizehit_title',\r\n            'uploadfailed',\r\n        ]);\r\n\r\n        prefetchTemplates([\r\n            this.getEmbedTemplateName(),\r\n            'tiny_recordrtc/timeremaining',\r\n        ]);\r\n    }\r\n\r\n    /**\r\n     * Display an error message to the user.\r\n     *\r\n     * @param {Promise<string>} title The error title\r\n     * @param {Promise<string>} content The error message\r\n     * @returns {Promise<Modal>}\r\n     */\r\n    async displayAlert(title, content) {\r\n        const pendingPromise = new Pending('core/confirm:alert');\r\n        const ModalFactory = await import('core/modal_factory');\r\n        const modal = await ModalFactory.create({\r\n            type: ModalFactory.types.ALERT,\r\n            title: title,\r\n            body: content,\r\n            removeOnClose: true,\r\n        });\r\n\r\n        modal.show();\r\n        pendingPromise.resolve();\r\n\r\n        return modal;\r\n    }\r\n\r\n    /**\r\n     * Handle successful capture of the User Media.\r\n     *\r\n     * @param {MediaStream} stream The stream as captured by the User Media.\r\n     */\r\n    handleCaptureSuccess(stream) {\r\n        // Set audio player source to microphone stream.\r\n        this.player.srcObject = stream;\r\n\r\n        if (this.playOnCapture()) {\r\n            // Mute audio, distracting while recording.\r\n            this.player.muted = true;\r\n\r\n            this.player.play();\r\n        }\r\n\r\n        this.stream = stream;\r\n        this.setupPlayerSource();\r\n        this.setRecordButtonState(true);\r\n    }\r\n\r\n    /**\r\n     * Setup the player to use the stream as a source.\r\n     */\r\n    setupPlayerSource() {\r\n        if (!this.player.srcObject) {\r\n            this.player.srcObject = this.stream;\r\n\r\n            // Mute audio, distracting while recording.\r\n            this.player.muted = true;\r\n\r\n            this.player.play();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enable the record button.\r\n     *\r\n     * @param {boolean|null} enabled Set the button state\r\n     */\r\n    setRecordButtonState(enabled) {\r\n        this.startStopButton.disabled = !enabled;\r\n    }\r\n\r\n    /**\r\n     * Configure button visibility for the record button.\r\n     *\r\n     * @param {boolean} visible Set the visibility of the button.\r\n     */\r\n    setRecordButtonVisibility(visible) {\r\n        const container = this.getButtonContainer('start-stop');\r\n        container.classList.toggle('hide', !visible);\r\n    }\r\n\r\n    /**\r\n     * Enable the upload button.\r\n     *\r\n     * @param {boolean|null} enabled Set the button state\r\n     */\r\n    setUploadButtonState(enabled) {\r\n        this.uploadButton.disabled = !enabled;\r\n    }\r\n\r\n    /**\r\n     * Configure button visibility for the upload button.\r\n     *\r\n     * @param {boolean} visible Set the visibility of the button.\r\n     */\r\n    setUploadButtonVisibility(visible) {\r\n        const container = this.getButtonContainer('upload');\r\n        container.classList.toggle('hide', !visible);\r\n    }\r\n    /**\r\n     * Handle failure to capture the User Media.\r\n     *\r\n     * @param {Error} error\r\n     */\r\n    handleCaptureFailure(error) {\r\n        // Changes 'CertainError' -> 'gumcertain' to match language string names.\r\n        var subject = `gum${error.name.replace('Error', '').toLowerCase()}`;\r\n        this.displayAlert(\r\n            getString(`${subject}_title`, component),\r\n            getString(subject, component)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Close the modal and stop recording.\r\n     */\r\n    close() {\r\n        // Closing the modal will destroy it and remove it from the DOM.\r\n        // It will also stop the recording via the hidden Modal Event.\r\n        this.modal.hide();\r\n    }\r\n\r\n    /**\r\n     * Register event listeners for the modal.\r\n     */\r\n    registerEventListeners() {\r\n        this.modalRoot.addEventListener('click', this.handleModalClick.bind(this));\r\n        this.modal.getRoot().on(ModalEvents.outsideClick, this.outsideClickHandler.bind(this));\r\n        this.modal.getRoot().on(ModalEvents.hidden, () => {\r\n            this.cleanupStream();\r\n            this.requestRecordingStop();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Prevent the Modal from closing when recording is on process.\r\n     *\r\n     * @param {MouseEvent} event The click event\r\n     */\r\n    async outsideClickHandler(event) {\r\n        if (this.isRecording()) {\r\n            // The user is recording.\r\n            // Do not distract with a confirmation, just prevent closing.\r\n            event.preventDefault();\r\n        } else if (this.hasData()) {\r\n            // If there is a blobsize then there is data that may be lost.\r\n            // Ask the user to confirm they want to close the modal.\r\n            // We prevent default here, and then close the modal if they confirm.\r\n            event.preventDefault();\r\n\r\n            try {\r\n                await saveCancelPromise(\r\n                    await getString(\"discard_title\", component),\r\n                    await getString(\"discard_desc\", component),\r\n                    await getString(\"confirm_yes\", component),\r\n                );\r\n                this.modal.hide();\r\n            } catch (error) {\r\n                // Do nothing, the modal will not close.\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle a click within the Modal.\r\n     *\r\n     * @param {MouseEvent} event The click event\r\n     */\r\n    handleModalClick(event) {\r\n        const button = event.target.closest('button');\r\n        if (button && button.dataset.action) {\r\n            const action = button.dataset.action;\r\n            if (action === 'startstop') {\r\n                this.handleRecordingStartStopRequested();\r\n            }\r\n\r\n            if (action === 'upload') {\r\n                this.uploadRecording();\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the click event for the recording start/stop button.\r\n     */\r\n    handleRecordingStartStopRequested() {\r\n        if (this.mediaRecorder?.state === 'recording') {\r\n            this.requestRecordingStop();\r\n        } else {\r\n            this.startRecording();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the media stream after it has finished.\r\n     */\r\n    async onMediaStopped() {\r\n        // Set source of audio player.\r\n        this.blob = new Blob(this.data.chunks, {\r\n            type: this.mediaRecorder.mimeType\r\n        });\r\n        this.player.srcObject = null;\r\n        this.player.src = URL.createObjectURL(this.blob);\r\n\r\n        // Change the label to \"Record again\".\r\n        this.setRecordButtonTextFromString('recordagain');\r\n\r\n        // Show audio player with controls enabled, and unmute.\r\n        this.player.muted = false;\r\n        this.player.controls = true;\r\n        this.getButtonContainer('player')?.classList.toggle('hide', false);\r\n\r\n        // Show upload button.\r\n        this.setUploadButtonVisibility(true);\r\n        this.setUploadButtonState(true);\r\n    }\r\n\r\n    /**\r\n     * Upload the recording and insert it into the editor content.\r\n     */\r\n    async uploadRecording() {\r\n        // Trigger error if no recording has been made.\r\n        if (this.data.chunks.length === 0) {\r\n            this.displayAlert('norecordingfound');\r\n            return;\r\n        }\r\n\r\n        const fileName = this.getFileName((Math.random() * 1000).toString().replace('.', ''));\r\n\r\n        // Upload recording to server.\r\n        try {\r\n            // Once uploading starts, do not allow any further changes to the recording.\r\n            this.setRecordButtonVisibility(false);\r\n\r\n            // Disable the upload button.\r\n            this.setUploadButtonState(false);\r\n\r\n            // Upload the recording.\r\n            const fileURL = await uploadFile(this.editor, 'media', this.blob, fileName, (progress) => {\r\n                this.setUploadButtonTextProgress(progress);\r\n            });\r\n            this.insertMedia(fileURL);\r\n            this.close();\r\n            addToast(await getString('recordinguploaded', component));\r\n        } catch (error) {\r\n            // Show a toast and unhide the button.\r\n            this.setUploadButtonState(true);\r\n\r\n            addToast(await getString('uploadfailed', component, {error}), {\r\n                type: 'error',\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Helper to get the container that a button is in.\r\n     *\r\n     * @param {string} purpose The button purpose\r\n     * @returns {HTMLElement}\r\n     */\r\n    getButtonContainer(purpose) {\r\n        return this.modalRoot.querySelector(`[data-purpose=\"${purpose}-container\"]`);\r\n    }\r\n\r\n    /**\r\n     * Check whether the browser is compatible with capturing media.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static isBrowserCompatible() {\r\n        return this.checkSecure() && this.hasUserMedia();\r\n    }\r\n\r\n    static async display(editor) {\r\n        const ModalClass = this.getModalClass();\r\n        const modal = await ModalFactory.create({\r\n            type: ModalClass.TYPE,\r\n            templateContext: {},\r\n            large: true,\r\n        });\r\n\r\n        // Set up the VideoRecorder.\r\n        const recorder = new this(editor, modal);\r\n        if (recorder.isReady()) {\r\n            modal.show();\r\n        }\r\n        return modal;\r\n    }\r\n\r\n    /**\r\n     * Check whether the browser is compatible with capturing media, and display a warning if not.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    checkAndWarnAboutBrowserCompatibility() {\r\n        if (!this.constructor.checkSecure()) {\r\n            getStrings(['insecurealert_title', 'insecurealert'].map((key) => ({key, component})))\r\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\r\n                .catch();\r\n            return false;\r\n        }\r\n\r\n        if (!this.constructor.hasUserMedia) {\r\n            getStrings(['nowebrtc_title', 'nowebrtc'].map((key) => ({key, component})))\r\n                .then(([title, message]) => addToast(message, {title, type: 'error'}))\r\n                .catch();\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Check whether the browser supports WebRTC.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    static hasUserMedia() {\r\n        return (navigator.mediaDevices && window.MediaRecorder);\r\n    }\r\n\r\n    /**\r\n     * Check whether the hostname is either hosted over SSL, or from a valid localhost hostname.\r\n     *\r\n     * The UserMedia API can only be used in secure contexts as noted.\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getUserMedia#privacy_and_security}\r\n     *\r\n     * @returns {boolean} Whether the plugin can be loaded.\r\n     */\r\n    static checkSecure() {\r\n        // Note: We can now use window.isSecureContext.\r\n        // https://developer.mozilla.org/en-US/docs/Web/Security/Secure_Contexts#feature_detection\r\n        // https://developer.mozilla.org/en-US/docs/Web/API/isSecureContext\r\n        return window.isSecureContext;\r\n    }\r\n\r\n    /**\r\n     * Update the content of the stop recording button timer.\r\n     */\r\n    async setStopRecordingButton() {\r\n        const {html, js} = await Templates.renderForPromise('tiny_recordrtc/timeremaining', this.getTimeRemaining());\r\n        Templates.replaceNodeContents(this.startStopButton, html, js);\r\n        this.buttonTimer = setInterval(this.updateRecordButtonTime.bind(this), 500);\r\n    }\r\n\r\n    /**\r\n     * Update the time on the stop recording button.\r\n     */\r\n    updateRecordButtonTime() {\r\n        const {remaining, minutes, seconds} = this.getTimeRemaining();\r\n        if (remaining < 0) {\r\n            this.requestRecordingStop();\r\n        } else {\r\n            this.startStopButton.querySelector('[data-type=\"minutes\"]').textContent = minutes;\r\n            this.startStopButton.querySelector('[data-type=\"seconds\"]').textContent = seconds;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set the text of the record button using a language string.\r\n     *\r\n     * @param {string} string The string identifier\r\n     */\r\n    async setRecordButtonTextFromString(string) {\r\n        this.startStopButton.textContent = await getString(string, component);\r\n    }\r\n\r\n    /**\r\n     * Set the upload button text progress.\r\n     *\r\n     * @param {number} progress The progress\r\n     */\r\n    async setUploadButtonTextProgress(progress) {\r\n        this.uploadButton.textContent = await getString('uploading', component, {\r\n            progress: Math.round(progress * 100) / 100,\r\n        });\r\n    }\r\n\r\n    async resetUploadButtonText() {\r\n        this.uploadButton.textContent = await getString('upload', component);\r\n    }\r\n\r\n    /**\r\n     * Clear the timer for the stop recording button.\r\n     */\r\n    clearButtonTimer() {\r\n        if (this.buttonTimer) {\r\n            clearInterval(this.buttonTimer);\r\n        }\r\n        this.buttonTimer = null;\r\n    }\r\n\r\n    /**\r\n     * Get the time remaining for the recording.\r\n     *\r\n     * @returns {Object} The minutes and seconds remaining.\r\n     */\r\n    getTimeRemaining() {\r\n        // All times are in milliseconds\r\n        const now = new Date().getTime();\r\n        const remaining = Math.floor(this.getTimeLimit() - ((now - this.startTime) / 1000));\r\n\r\n        const formatter = new Intl.NumberFormat(navigator.language, {minimumIntegerDigits: 2});\r\n        const seconds = formatter.format(remaining % 60);\r\n        const minutes = formatter.format(Math.floor((remaining - seconds) / 60));\r\n        return {\r\n            remaining,\r\n            minutes,\r\n            seconds,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Get the maximum file size that can be uploaded.\r\n     *\r\n     * @returns {number} The max byte size\r\n     */\r\n    getMaxUploadSize() {\r\n        return this.config.maxrecsize;\r\n    }\r\n\r\n    /**\r\n     * Stop the recording.\r\n     * Please note that this should only stop the recording.\r\n     * Anything related to processing the recording should be handled by the\r\n     * mediaRecorder's stopped event handler which is processed after it has stopped.\r\n     */\r\n    requestRecordingStop() {\r\n        if (this.mediaRecorder && this.mediaRecorder.state !== 'inactive') {\r\n            this.stopRequested = true;\r\n        } else {\r\n            // There is no recording to stop, but the stream must still be cleaned up.\r\n            this.cleanupStream();\r\n        }\r\n    }\r\n\r\n    stopRecorder() {\r\n        this.mediaRecorder.stop();\r\n\r\n        // Unmute the player so that the audio is heard during playback.\r\n        this.player.muted = false;\r\n    }\r\n\r\n    /**\r\n     * Clean up the stream.\r\n     *\r\n     * This involves stopping any track which is still active.\r\n     */\r\n    cleanupStream() {\r\n        if (this.stream) {\r\n            this.stream.getTracks()\r\n                .filter((track) => track.readyState !== 'ended')\r\n                .forEach((track) => track.stop());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle the mediaRecorder `stop` event.\r\n     */\r\n    handleStopped() {\r\n        // Handle the stream data.\r\n        this.onMediaStopped();\r\n\r\n        // Clear the button timer.\r\n        this.clearButtonTimer();\r\n    }\r\n\r\n    /**\r\n     * Handle the mediaRecorder `start` event.\r\n     *\r\n     * This event is called when the recording starts.\r\n     */\r\n    handleStarted() {\r\n        this.startTime = new Date().getTime();\r\n        this.setStopRecordingButton();\r\n    }\r\n\r\n    /**\r\n     * Handle the mediaRecorder `dataavailable` event.\r\n     *\r\n     * @param {Event} event\r\n     */\r\n    handleDataAvailable(event) {\r\n        if (this.isRecording()) {\r\n            const newSize = this.data.blobSize + event.data.size;\r\n            // Recording stops when either the maximum upload size is reached, or the time limit expires.\r\n            // The time limit is checked in the `updateButtonTime` function.\r\n            if (newSize >= this.getMaxUploadSize()) {\r\n                this.stopRecorder();\r\n                this.displayFileLimitHitMessage();\r\n            } else {\r\n                // Push recording slice to array.\r\n                this.data.chunks.push(event.data);\r\n\r\n                // Size of all recorded data so far.\r\n                this.data.blobSize = newSize;\r\n\r\n                if (this.stopRequested) {\r\n                    this.stopRecorder();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    async displayFileLimitHitMessage() {\r\n        addToast(await getString('maxfilesizehit', component), {\r\n            title: await getString('maxfilesizehit_title', component),\r\n            type: 'error',\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Check whether the recording is in progress.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    isRecording() {\r\n        return this.mediaRecorder?.state === 'recording';\r\n    }\r\n\r\n    /**\r\n     * Whether any data has been recorded.\r\n     *\r\n     * @returns {boolean}\r\n     */\r\n    hasData() {\r\n        return !!this.data?.blobSize;\r\n    }\r\n\r\n    /**\r\n     * Start the recording\r\n     */\r\n    async startRecording() {\r\n        if (this.mediaRecorder) {\r\n            // Stop the existing recorder if it exists.\r\n            if (this.isRecording()) {\r\n                this.mediaRecorder.stop();\r\n            }\r\n\r\n            if (this.hasData()) {\r\n                const resetRecording = await this.recordAgainConfirmation();\r\n                if (!resetRecording) {\r\n                    // User cancelled at the confirmation to reset the data, so exit early.\r\n                    return;\r\n                }\r\n                this.setUploadButtonVisibility(false);\r\n            }\r\n\r\n            this.mediaRecorder = null;\r\n        }\r\n\r\n        // The options for the recording codecs and bitrates.\r\n        this.mediaRecorder = new MediaRecorder(this.stream, this.getParsedRecordingOptions());\r\n\r\n        this.mediaRecorder.addEventListener('dataavailable', this.handleDataAvailable.bind(this));\r\n        this.mediaRecorder.addEventListener('stop', this.handleStopped.bind(this));\r\n        this.mediaRecorder.addEventListener('start', this.handleStarted.bind(this));\r\n\r\n        this.data = {\r\n            chunks: [],\r\n            blobSize: 0\r\n        };\r\n        this.setupPlayerSource();\r\n        this.stopRequested = false;\r\n\r\n        // Capture in 50ms chunks.\r\n        this.mediaRecorder.start(50);\r\n    }\r\n\r\n    /**\r\n     * Confirm whether the user wants to reset the existing recoring.\r\n     *\r\n     * @returns {Promise<boolean>} Whether the user confirmed the reset.\r\n     */\r\n    async recordAgainConfirmation() {\r\n        try {\r\n            await saveCancelPromise(\r\n                await getString(\"recordagain_title\", component),\r\n                await getString(\"recordagain_desc\", component),\r\n                await getString(\"confirm_yes\", component)\r\n            );\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Insert the HTML to embed the recording into the editor content.\r\n     *\r\n     * @param {string} source The URL to view the media.\r\n     */\r\n    async insertMedia(source) {\r\n        const {html} = await Templates.renderForPromise(\r\n            this.getEmbedTemplateName(),\r\n            this.getEmbedTemplateContext({\r\n                source,\r\n            })\r\n        );\r\n        this.editor.insertContent(html);\r\n    }\r\n\r\n    /**\r\n     * Add or modify the template parameters for the specified type.\r\n     *\r\n     * @param {Object} templateContext The Tempalte context to use\r\n     * @returns {Object} The finalised template context\r\n     */\r\n    getEmbedTemplateContext(templateContext) {\r\n        return templateContext;\r\n    }\r\n}\r\n"],"names":["constructor","editor","modal","ready","this","checkAndWarnAboutBrowserCompatibility","config","params","modalRoot","getRoot","startStopButton","querySelector","uploadButton","setRecordButtonState","player","configurePlayer","registerEventListeners","captureUserMedia","prefetchContent","isReady","Error","name","getSupportedTypes","getRecordingOptions","getFileName","prefix","getMediaConstraints","playOnCapture","getTimeLimit","getEmbedTemplateName","getParsedRecordingOptions","types","options","compatTypes","filter","type","window","MediaRecorder","isTypeSupported","length","mimeType","stream","navigator","mediaDevices","getUserMedia","handleCaptureSuccess","error","handleCaptureFailure","component","title","content","pendingPromise","Pending","ModalFactory","create","ALERT","body","removeOnClose","show","resolve","srcObject","muted","play","setupPlayerSource","enabled","disabled","setRecordButtonVisibility","visible","getButtonContainer","classList","toggle","setUploadButtonState","setUploadButtonVisibility","subject","replace","toLowerCase","displayAlert","close","hide","addEventListener","handleModalClick","bind","on","ModalEvents","outsideClick","outsideClickHandler","hidden","cleanupStream","requestRecordingStop","event","isRecording","preventDefault","hasData","button","target","closest","dataset","action","handleRecordingStartStopRequested","uploadRecording","mediaRecorder","state","startRecording","blob","Blob","data","chunks","src","URL","createObjectURL","setRecordButtonTextFromString","controls","fileName","Math","random","toString","fileURL","progress","setUploadButtonTextProgress","insertMedia","purpose","checkSecure","hasUserMedia","ModalClass","getModalClass","TYPE","templateContext","large","map","key","then","_ref2","message","catch","_ref","isSecureContext","html","js","Templates","renderForPromise","getTimeRemaining","replaceNodeContents","buttonTimer","setInterval","updateRecordButtonTime","remaining","minutes","seconds","textContent","string","round","clearButtonTimer","clearInterval","now","Date","getTime","floor","startTime","formatter","Intl","NumberFormat","language","minimumIntegerDigits","format","getMaxUploadSize","maxrecsize","stopRequested","stopRecorder","stop","getTracks","track","readyState","forEach","handleStopped","onMediaStopped","handleStarted","setStopRecordingButton","handleDataAvailable","newSize","blobSize","size","displayFileLimitHitMessage","push","_this$data","recordAgainConfirmation","start","source","getEmbedTemplateContext","insertContent"],"mappings":"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"}