{"version":3,"file":"audio_recorder.min.js","sources":["../src/audio_recorder.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Tiny Record RTC - audio recorder configuration.\r\n *\r\n * @module      tiny_recordrtc/audio\r\n * @copyright   2022 Stevani Andolo <stevani@hotmail.com.au>\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport BaseClass from './base_recorder';\r\nimport Modal from './modal';\r\nimport ModalRegistry from 'core/modal_registry';\r\nimport {component} from 'tiny_recordrtc/common';\r\n\r\nexport default class Audio extends BaseClass {\r\n    configurePlayer() {\r\n        return this.modalRoot.querySelector('audio');\r\n    }\r\n\r\n    getSupportedTypes() {\r\n        return [\r\n            'audio/webm;codecs=opus',\r\n            'audio/ogg;codecs=opus',\r\n        ];\r\n    }\r\n\r\n    getParsedRecordingOptions() {\r\n        return {\r\n            audioBitsPerSecond: parseInt(this.config.audiobitrate),\r\n        };\r\n    }\r\n\r\n    getMediaConstraints() {\r\n        return {\r\n            audio: true,\r\n        };\r\n    }\r\n\r\n    getRecordingType() {\r\n        return 'audio';\r\n    }\r\n\r\n    getTimeLimit() {\r\n        return this.config.audiotimelimit;\r\n    }\r\n\r\n    getEmbedTemplateName() {\r\n        return 'tiny_recordrtc/embed_audio';\r\n    }\r\n\r\n    getFileName(prefix) {\r\n        return `${prefix}-audio.ogg`;\r\n    }\r\n\r\n    static getModalClass() {\r\n        const modalType = `${component}/audio_recorder`;\r\n        const registration = ModalRegistry.get(modalType);\r\n        if (registration) {\r\n            return registration.module;\r\n        }\r\n\r\n        const AudioModal = class extends Modal {\r\n            static TYPE = modalType;\r\n            static TEMPLATE = `${component}/audio_recorder`;\r\n        };\r\n\r\n        ModalRegistry.register(AudioModal.TYPE, AudioModal, AudioModal.TEMPLATE);\r\n        return AudioModal;\r\n    }\r\n}\r\n"],"names":["Audio","BaseClass","configurePlayer","this","modalRoot","querySelector","getSupportedTypes","getParsedRecordingOptions","audioBitsPerSecond","parseInt","config","audiobitrate","getMediaConstraints","audio","getRecordingType","getTimeLimit","audiotimelimit","getEmbedTemplateName","getFileName","prefix","modalType","component","registration","ModalRegistry","get","module","AudioModal","Modal","register","TYPE","TEMPLATE"],"mappings":"+pBA4BqBA,cAAcC,uBAC/BC,yBACWC,KAAKC,UAAUC,cAAc,SAGxCC,0BACW,CACH,yBACA,yBAIRC,kCACW,CACHC,mBAAoBC,SAASN,KAAKO,OAAOC,eAIjDC,4BACW,CACHC,OAAO,GAIfC,yBACW,QAGXC,sBACWZ,KAAKO,OAAOM,eAGvBC,6BACW,6BAGXC,YAAYC,wBACEA,6DAIJC,oBAAeC,qCACfC,aAAeC,wBAAcC,IAAIJ,cACnCE,oBACOA,aAAaG,aAGlBC,mCAAa,cAAcC,wBACfP,uDACOC,6EAGXO,SAASF,WAAWG,KAAMH,WAAYA,WAAWI,UACxDJ"}