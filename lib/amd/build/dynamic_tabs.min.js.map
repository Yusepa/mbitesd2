{"version":3,"file":"dynamic_tabs.min.js","sources":["../src/dynamic_tabs.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Dynamic Tabs UI element with AJAX loading of tabs content\r\n *\r\n * @module      core/dynamic_tabs\r\n * @copyright   2021 David Matamoros <davidmc@moodle.com> based on code from Marina Glancy\r\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport $ from 'jquery';\r\nimport Templates from 'core/templates';\r\nimport {addIconToContainer} from 'core/loadingicon';\r\nimport Notification from 'core/notification';\r\nimport Pending from 'core/pending';\r\nimport {get_strings as getStrings} from 'core/str';\r\nimport {getContent} from 'core/local/repository/dynamic_tabs';\r\nimport {isAnyWatchedFormDirty, resetAllFormDirtyStates} from 'core_form/changechecker';\r\n\r\nconst SELECTORS = {\r\n    dynamicTabs: '.dynamictabs',\r\n    activeTab: '.dynamictabs .nav-link.active',\r\n    allActiveTabs: '.dynamictabs .nav-link[data-toggle=\"tab\"]:not(.disabled)',\r\n    tabContent: '.dynamictabs .tab-pane [data-tab-content]',\r\n    tabToggle: 'a[data-toggle=\"tab\"]',\r\n    tabPane: '.dynamictabs .tab-pane',\r\n};\r\n\r\nSELECTORS.forTabName = tabName => `.dynamictabs [data-tab-content=\"${tabName}\"]`;\r\nSELECTORS.forTabId = tabName => `.dynamictabs [data-toggle=\"tab\"][href=\"#${tabName}\"]`;\r\n\r\n/**\r\n * Initialises the tabs view on the page (only one tabs view per page is supported)\r\n */\r\nexport const init = () => {\r\n    const tabToggle = $(SELECTORS.tabToggle);\r\n\r\n    // Listen to click, warn user if they are navigating away with unsaved form changes.\r\n    tabToggle.on('click', (event) => {\r\n        if (!isAnyWatchedFormDirty()) {\r\n            return;\r\n        }\r\n\r\n        event.preventDefault();\r\n        event.stopPropagation();\r\n\r\n        getStrings([\r\n            {key: 'changesmade', component: 'moodle'},\r\n            {key: 'changesmadereallygoaway', component: 'moodle'},\r\n            {key: 'confirm', component: 'moodle'},\r\n        ]).then(([strChangesMade, strChangesMadeReally, strConfirm]) =>\r\n            // Reset form dirty state on confirmation, re-trigger the event.\r\n            Notification.confirm(strChangesMade, strChangesMadeReally, strConfirm, null, () => {\r\n                resetAllFormDirtyStates();\r\n                $(event.target).trigger(event.type);\r\n            })\r\n        ).catch(Notification.exception);\r\n    });\r\n\r\n    // This code listens to Bootstrap events 'show.bs.tab' and 'shown.bs.tab' which is triggered using JQuery and\r\n    // can not be converted yet to native events.\r\n    tabToggle\r\n        .on('show.bs.tab', function() {\r\n            // Clean content from previous tab.\r\n            const previousTabName = getActiveTabName();\r\n            if (previousTabName) {\r\n                const previousTab = document.querySelector(SELECTORS.forTabName(previousTabName));\r\n                previousTab.textContent = '';\r\n            }\r\n        })\r\n        .on('shown.bs.tab', function() {\r\n            const tab = $($(this).attr('href'));\r\n            if (tab.length !== 1) {\r\n                return;\r\n            }\r\n            loadTab(tab.attr('id'));\r\n        });\r\n\r\n    if (!openTabFromHash()) {\r\n        const tabs = document.querySelector(SELECTORS.allActiveTabs);\r\n        if (tabs) {\r\n            openTab(tabs.getAttribute('aria-controls'));\r\n        } else {\r\n            // We may hide tabs if there is only one available, just load the contents of the first tab.\r\n            const tabPane = document.querySelector(SELECTORS.tabPane);\r\n            if (tabPane) {\r\n                tabPane.classList.add('active', 'show');\r\n                loadTab(tabPane.getAttribute('id'));\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Returns id/name of the currently active tab\r\n *\r\n * @return {String|null}\r\n */\r\nconst getActiveTabName = () => {\r\n    const element = document.querySelector(SELECTORS.activeTab);\r\n    return element?.getAttribute('aria-controls') || null;\r\n};\r\n\r\n/**\r\n * Returns the id/name of the first tab\r\n *\r\n * @return {String|null}\r\n */\r\nconst getFirstTabName = () => {\r\n    const element = document.querySelector(SELECTORS.tabContent);\r\n    return element?.dataset.tabContent || null;\r\n};\r\n\r\n/**\r\n * Loads contents of a tab using an AJAX request\r\n *\r\n * @param {String} tabName\r\n */\r\nconst loadTab = (tabName) => {\r\n    // If tabName is not specified find the active tab, or if is not defined, the first available tab.\r\n    tabName = tabName ?? getActiveTabName() ?? getFirstTabName();\r\n    const tab = document.querySelector(SELECTORS.forTabName(tabName));\r\n    if (!tab) {\r\n        return;\r\n    }\r\n\r\n    const pendingPromise = new Pending('core/dynamic_tabs:loadTab:' + tabName);\r\n    let tabjs = '';\r\n\r\n    addIconToContainer(tab)\r\n    .then(() => {\r\n        let tabArgs = {...tab.dataset};\r\n        delete tabArgs.tabClass;\r\n        delete tabArgs.tabContent;\r\n        return getContent(tab.dataset.tabClass, JSON.stringify(tabArgs));\r\n    })\r\n    .then((data) => {\r\n        tabjs = data.javascript;\r\n        return Templates.render(data.template, JSON.parse(data.content));\r\n    })\r\n    .then((html, js) => {\r\n        return Templates.replaceNodeContents(tab, html, js + tabjs);\r\n    })\r\n    .then(() => {\r\n        pendingPromise.resolve();\r\n        return null;\r\n    })\r\n    .catch(Notification.exception);\r\n};\r\n\r\n/**\r\n * Return the tab given the tab name\r\n *\r\n * @param {String} tabName\r\n * @return {HTMLElement}\r\n */\r\nconst getTab = (tabName) => {\r\n    return document.querySelector(SELECTORS.forTabId(tabName));\r\n};\r\n\r\n/**\r\n * Return the tab pane given the tab name\r\n *\r\n * @param {String} tabName\r\n * @return {HTMLElement}\r\n */\r\nconst getTabPane = (tabName) => {\r\n    return document.getElementById(tabName);\r\n};\r\n\r\n/**\r\n * Open the tab on page load. If this script loads before theme_boost/tab we need to open tab ourselves\r\n *\r\n * @param {String} tabName\r\n * @return {Boolean}\r\n */\r\nconst openTab = (tabName) => {\r\n    const tab = getTab(tabName);\r\n    if (!tab) {\r\n        return false;\r\n    }\r\n\r\n    loadTab(tabName);\r\n    tab.classList.add('active');\r\n    getTabPane(tabName).classList.add('active', 'show');\r\n    return true;\r\n};\r\n\r\n/**\r\n * If there is a location hash that is the same as the tab name - open this tab.\r\n *\r\n * @return {Boolean}\r\n */\r\nconst openTabFromHash = () => {\r\n    const hash = document.location.hash;\r\n    if (hash.match(/^#\\w+$/g)) {\r\n        return openTab(hash.replace(/^#/g, ''));\r\n    }\r\n\r\n    return false;\r\n};\r\n"],"names":["SELECTORS","dynamicTabs","activeTab","allActiveTabs","tabContent","tabToggle","tabPane","tabName","on","event","preventDefault","stopPropagation","key","component","then","_ref","strChangesMade","strChangesMadeReally","strConfirm","Notification","confirm","target","trigger","type","catch","exception","previousTabName","getActiveTabName","document","querySelector","forTabName","textContent","tab","this","attr","length","loadTab","openTabFromHash","tabs","openTab","getAttribute","classList","add","element","dataset","getFirstTabName","pendingPromise","Pending","tabjs","tabArgs","tabClass","JSON","stringify","data","javascript","Templates","render","template","parse","content","html","js","replaceNodeContents","resolve","forTabId","getTab","getElementById","getTabPane","hash","location","match","replace"],"mappings":";;;;;;;4QAgCMA,UAAY,CACdC,YAAa,eACbC,UAAW,gCACXC,cAAe,2DACfC,WAAY,4CACZC,UAAW,uBACXC,QAAS,yBAGbN,WAAuBO,mDAA8CA,cACrEP,SAAqBO,2DAAsDA,6BAKvD,WACVF,WAAY,mBAAEL,UAAUK,cAG9BA,UAAUG,GAAG,SAAUC,SACd,4CAILA,MAAMC,iBACND,MAAME,uCAEK,CACP,CAACC,IAAK,cAAeC,UAAW,UAChC,CAACD,IAAK,0BAA2BC,UAAW,UAC5C,CAACD,IAAK,UAAWC,UAAW,YAC7BC,MAAKC,WAAEC,eAAgBC,qBAAsBC,wBAE5CC,sBAAaC,QAAQJ,eAAgBC,qBAAsBC,WAAY,MAAM,sEAEvET,MAAMY,QAAQC,QAAQb,MAAMc,YAEpCC,MAAML,sBAAaM,eAKzBpB,UACKG,GAAG,eAAe,iBAETkB,gBAAkBC,sBACpBD,gBAAiB,CACGE,SAASC,cAAc7B,UAAU8B,WAAWJ,kBACpDK,YAAc,OAGjCvB,GAAG,gBAAgB,iBACVwB,KAAM,oBAAE,mBAAEC,MAAMC,KAAK,SACR,IAAfF,IAAIG,QAGRC,QAAQJ,IAAIE,KAAK,WAGpBG,kBAAmB,OACdC,KAAOV,SAASC,cAAc7B,UAAUG,kBAC1CmC,KACAC,QAAQD,KAAKE,aAAa,sBACvB,OAEGlC,QAAUsB,SAASC,cAAc7B,UAAUM,SAC7CA,UACAA,QAAQmC,UAAUC,IAAI,SAAU,QAChCN,QAAQ9B,QAAQkC,aAAa,iBAWvCb,iBAAmB,WACfgB,QAAUf,SAASC,cAAc7B,UAAUE,kBAC1CyC,MAAAA,eAAAA,QAASH,aAAa,mBAAoB,MAkB/CJ,QAAW7B,6BAEbA,uCAAUA,qCAAWoB,0CAZD,YACdgB,QAAUf,SAASC,cAAc7B,UAAUI,mBAC1CuC,MAAAA,eAAAA,QAASC,QAAQxC,aAAc,MAUKyC,SACrCb,IAAMJ,SAASC,cAAc7B,UAAU8B,WAAWvB,cACnDyB,iBAICc,eAAiB,IAAIC,iBAAQ,6BAA+BxC,aAC9DyC,MAAQ,uCAEOhB,KAClBlB,MAAK,SACEmC,QAAU,IAAIjB,IAAIY,uBACfK,QAAQC,gBACRD,QAAQ7C,YACR,4BAAW4B,IAAIY,QAAQM,SAAUC,KAAKC,UAAUH,aAE1DnC,MAAMuC,OACHL,MAAQK,KAAKC,WACNC,mBAAUC,OAAOH,KAAKI,SAAUN,KAAKO,MAAML,KAAKM,aAE1D7C,MAAK,CAAC8C,KAAMC,KACFN,mBAAUO,oBAAoB9B,IAAK4B,KAAMC,GAAKb,SAExDlC,MAAK,KACFgC,eAAeiB,UACR,QAEVvC,MAAML,sBAAaM,YA6BlBc,QAAWhC,gBACPyB,IArBMzB,CAAAA,SACLqB,SAASC,cAAc7B,UAAUgE,SAASzD,UAoBrC0D,CAAO1D,iBACdyB,MAILI,QAAQ7B,SACRyB,IAAIS,UAAUC,IAAI,UAjBFnC,CAAAA,SACTqB,SAASsC,eAAe3D,SAiB/B4D,CAAW5D,SAASkC,UAAUC,IAAI,SAAU,SACrC,IAQLL,gBAAkB,WACd+B,KAAOxC,SAASyC,SAASD,aAC3BA,KAAKE,MAAM,YACJ/B,QAAQ6B,KAAKG,QAAQ,MAAO"}