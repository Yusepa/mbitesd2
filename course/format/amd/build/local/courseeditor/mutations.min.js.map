{"version":3,"file":"mutations.min.js","sources":["../../../src/local/courseeditor/mutations.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nimport ajax from 'core/ajax';\r\n\r\n/**\r\n * Default mutation manager\r\n *\r\n * @module     core_courseformat/local/courseeditor/mutations\r\n * @class     core_courseformat/local/courseeditor/mutations\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\nexport default class {\r\n\r\n    // All course editor mutations for Moodle 4.0 will be located in this file.\r\n\r\n    /**\r\n     * Private method to call core_courseformat_update_course webservice.\r\n     *\r\n     * @method _callEditWebservice\r\n     * @param {string} action\r\n     * @param {number} courseId\r\n     * @param {array} ids\r\n     * @param {number} targetSectionId optional target section id (for moving actions)\r\n     * @param {number} targetCmId optional target cm id (for moving actions)\r\n     */\r\n    async _callEditWebservice(action, courseId, ids, targetSectionId, targetCmId) {\r\n        const args = {\r\n            action,\r\n            courseid: courseId,\r\n            ids,\r\n        };\r\n        if (targetSectionId) {\r\n            args.targetsectionid = targetSectionId;\r\n        }\r\n        if (targetCmId) {\r\n            args.targetcmid = targetCmId;\r\n        }\r\n        let ajaxresult = await ajax.call([{\r\n            methodname: 'core_courseformat_update_course',\r\n            args,\r\n        }])[0];\r\n        return JSON.parse(ajaxresult);\r\n    }\r\n\r\n    /**\r\n     * Execute a basic section state action.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {string} action the action name\r\n     * @param {array} sectionIds the section ids\r\n     * @param {number} targetSectionId optional target section id (for moving actions)\r\n     * @param {number} targetCmId optional target cm id (for moving actions)\r\n     */\r\n    async _sectionBasicAction(stateManager, action, sectionIds, targetSectionId, targetCmId) {\r\n        const course = stateManager.get('course');\r\n        this.sectionLock(stateManager, sectionIds, true);\r\n        const updates = await this._callEditWebservice(\r\n            action,\r\n            course.id,\r\n            sectionIds,\r\n            targetSectionId,\r\n            targetCmId\r\n        );\r\n        stateManager.processUpdates(updates);\r\n        this.sectionLock(stateManager, sectionIds, false);\r\n    }\r\n\r\n    /**\r\n     * Execute a basic course module state action.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {string} action the action name\r\n     * @param {array} cmIds the cm ids\r\n     * @param {number} targetSectionId optional target section id (for moving actions)\r\n     * @param {number} targetCmId optional target cm id (for moving actions)\r\n     */\r\n    async _cmBasicAction(stateManager, action, cmIds, targetSectionId, targetCmId) {\r\n        const course = stateManager.get('course');\r\n        this.cmLock(stateManager, cmIds, true);\r\n        const updates = await this._callEditWebservice(\r\n            action,\r\n            course.id,\r\n            cmIds,\r\n            targetSectionId,\r\n            targetCmId\r\n        );\r\n        stateManager.processUpdates(updates);\r\n        this.cmLock(stateManager, cmIds, false);\r\n    }\r\n\r\n    /**\r\n     * Mutation module initialize.\r\n     *\r\n     * The reactive instance will execute this method when addMutations or setMutation is invoked.\r\n     *\r\n     * @param {StateManager} stateManager the state manager\r\n     */\r\n    init(stateManager) {\r\n        // Add a method to prepare the fields when some update is comming from the server.\r\n        stateManager.addUpdateTypes({\r\n            prepareFields: this._prepareFields,\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Add default values to state elements.\r\n     *\r\n     * This method is called every time a webservice returns a update state message.\r\n     *\r\n     * @param {Object} stateManager the state manager\r\n     * @param {String} updateName the state element to update\r\n     * @param {Object} fields the new data\r\n     * @returns {Object} final fields data\r\n     */\r\n    _prepareFields(stateManager, updateName, fields) {\r\n        // Any update should unlock the element.\r\n        fields.locked = false;\r\n        return fields;\r\n    }\r\n\r\n    /**\r\n     * Hides sections.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the list of section ids\r\n     */\r\n    async sectionHide(stateManager, sectionIds) {\r\n        await this._sectionBasicAction(stateManager, 'section_hide', sectionIds);\r\n    }\r\n\r\n    /**\r\n     * Show sections.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the list of section ids\r\n     */\r\n    async sectionShow(stateManager, sectionIds) {\r\n        await this._sectionBasicAction(stateManager, 'section_show', sectionIds);\r\n    }\r\n\r\n    /**\r\n     * Show cms.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of cm ids\r\n     */\r\n    async cmShow(stateManager, cmIds) {\r\n        await this._cmBasicAction(stateManager, 'cm_show', cmIds);\r\n    }\r\n\r\n    /**\r\n     * Hide cms.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of cm ids\r\n     */\r\n    async cmHide(stateManager, cmIds) {\r\n        await this._cmBasicAction(stateManager, 'cm_hide', cmIds);\r\n    }\r\n\r\n    /**\r\n     * Stealth cms.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of cm ids\r\n     */\r\n    async cmStealth(stateManager, cmIds) {\r\n        await this._cmBasicAction(stateManager, 'cm_stealth', cmIds);\r\n    }\r\n\r\n    /**\r\n     * Move course modules to specific course location.\r\n     *\r\n     * Note that one of targetSectionId or targetCmId should be provided in order to identify the\r\n     * new location:\r\n     *  - targetCmId: the activities will be located avobe the target cm. The targetSectionId\r\n     *                value will be ignored in this case.\r\n     *  - targetSectionId: the activities will be appended to the section. In this case\r\n     *                     targetSectionId should not be present.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmids the list of cm ids to move\r\n     * @param {number} targetSectionId the target section id\r\n     * @param {number} targetCmId the target course module id\r\n     */\r\n    async cmMove(stateManager, cmids, targetSectionId, targetCmId) {\r\n        if (!targetSectionId && !targetCmId) {\r\n            throw new Error(`Mutation cmMove requires targetSectionId or targetCmId`);\r\n        }\r\n        const course = stateManager.get('course');\r\n        this.cmLock(stateManager, cmids, true);\r\n        const updates = await this._callEditWebservice('cm_move', course.id, cmids, targetSectionId, targetCmId);\r\n        stateManager.processUpdates(updates);\r\n        this.cmLock(stateManager, cmids, false);\r\n    }\r\n\r\n    /**\r\n     * Move course modules to specific course location.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the list of section ids to move\r\n     * @param {number} targetSectionId the target section id\r\n     */\r\n    async sectionMove(stateManager, sectionIds, targetSectionId) {\r\n        if (!targetSectionId) {\r\n            throw new Error(`Mutation sectionMove requires targetSectionId`);\r\n        }\r\n        const course = stateManager.get('course');\r\n        this.sectionLock(stateManager, sectionIds, true);\r\n        const updates = await this._callEditWebservice('section_move', course.id, sectionIds, targetSectionId);\r\n        stateManager.processUpdates(updates);\r\n        this.sectionLock(stateManager, sectionIds, false);\r\n    }\r\n\r\n    /**\r\n     * Add a new section to a specific course location.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {number} targetSectionId optional the target section id\r\n     */\r\n    async addSection(stateManager, targetSectionId) {\r\n        if (!targetSectionId) {\r\n            targetSectionId = 0;\r\n        }\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('section_add', course.id, [], targetSectionId);\r\n        stateManager.processUpdates(updates);\r\n    }\r\n\r\n    /**\r\n     * Delete sections.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the list of course modules ids\r\n     */\r\n    async sectionDelete(stateManager, sectionIds) {\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('section_delete', course.id, sectionIds);\r\n        stateManager.processUpdates(updates);\r\n    }\r\n\r\n    /**\r\n     * Mark or unmark course modules as dragging.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of course modules ids\r\n     * @param {bool} dragValue the new dragging value\r\n     */\r\n    cmDrag(stateManager, cmIds, dragValue) {\r\n        this.setPageItem(stateManager);\r\n        this._setElementsValue(stateManager, 'cm', cmIds, 'dragging', dragValue);\r\n    }\r\n\r\n    /**\r\n     * Mark or unmark course sections as dragging.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the list of section ids\r\n     * @param {bool} dragValue the new dragging value\r\n     */\r\n    sectionDrag(stateManager, sectionIds, dragValue) {\r\n        this.setPageItem(stateManager);\r\n        this._setElementsValue(stateManager, 'section', sectionIds, 'dragging', dragValue);\r\n    }\r\n\r\n    /**\r\n     * Mark or unmark course modules as complete.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of course modules ids\r\n     * @param {bool} complete the new completion value\r\n     */\r\n    cmCompletion(stateManager, cmIds, complete) {\r\n        const newValue = (complete) ? 1 : 0;\r\n        this._setElementsValue(stateManager, 'cm', cmIds, 'completionstate', newValue);\r\n    }\r\n\r\n    /**\r\n     * Move cms to the right: indent = 1.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of cm ids\r\n     */\r\n    async cmMoveRight(stateManager, cmIds) {\r\n        await this._cmBasicAction(stateManager, 'cm_moveright', cmIds);\r\n    }\r\n\r\n    /**\r\n     * Move cms to the left: indent = 0.\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of cm ids\r\n     */\r\n    async cmMoveLeft(stateManager, cmIds) {\r\n        await this._cmBasicAction(stateManager, 'cm_moveleft', cmIds);\r\n    }\r\n\r\n    /**\r\n     * Lock or unlock course modules.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} cmIds the list of course modules ids\r\n     * @param {bool} lockValue the new locked value\r\n     */\r\n    cmLock(stateManager, cmIds, lockValue) {\r\n        this._setElementsValue(stateManager, 'cm', cmIds, 'locked', lockValue);\r\n    }\r\n\r\n    /**\r\n     * Lock or unlock course sections.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the list of section ids\r\n     * @param {bool} lockValue the new locked value\r\n     */\r\n    sectionLock(stateManager, sectionIds, lockValue) {\r\n        this._setElementsValue(stateManager, 'section', sectionIds, 'locked', lockValue);\r\n    }\r\n\r\n    _setElementsValue(stateManager, name, ids, fieldName, newValue) {\r\n        stateManager.setReadOnly(false);\r\n        ids.forEach((id) => {\r\n            const element = stateManager.get(name, id);\r\n            if (element) {\r\n                element[fieldName] = newValue;\r\n            }\r\n        });\r\n        stateManager.setReadOnly(true);\r\n    }\r\n\r\n    /**\r\n     * Set the page current item.\r\n     *\r\n     * Only one element of the course state can be the page item at a time.\r\n     *\r\n     * There are several actions that can alter the page current item. For example, when the user is in an activity\r\n     * page, the page item is always the activity one. However, in a course page, when the user scrolls to an element,\r\n     * this element get the page item.\r\n     *\r\n     * If the page item is static means that it is not meant to change. This is important because\r\n     * static page items has some special logic. For example, if a cm is the static page item\r\n     * and it is inside a collapsed section, the course index will expand the section to make it visible.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {String|undefined} type the element type (section or cm). Undefined will remove the current page item.\r\n     * @param {Number|undefined} id the element id\r\n     * @param {boolean|undefined} isStatic if the page item is static\r\n     */\r\n    setPageItem(stateManager, type, id, isStatic) {\r\n        let newPageItem;\r\n        if (type !== undefined) {\r\n            newPageItem = stateManager.get(type, id);\r\n            if (!newPageItem) {\r\n                return;\r\n            }\r\n        }\r\n        stateManager.setReadOnly(false);\r\n        // Remove the current page item.\r\n        const course = stateManager.get('course');\r\n        course.pageItem = null;\r\n        // Save the new page item.\r\n        if (newPageItem) {\r\n            course.pageItem = {\r\n                id,\r\n                type,\r\n                sectionId: (type == 'section') ? newPageItem.id : newPageItem.sectionid,\r\n                isStatic,\r\n            };\r\n        }\r\n        stateManager.setReadOnly(true);\r\n    }\r\n\r\n    /**\r\n     * Unlock all course elements.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     */\r\n    unlockAll(stateManager) {\r\n        const state = stateManager.state;\r\n        stateManager.setReadOnly(false);\r\n        state.section.forEach((section) => {\r\n            section.locked = false;\r\n        });\r\n        state.cm.forEach((cm) => {\r\n            cm.locked = false;\r\n        });\r\n        stateManager.setReadOnly(true);\r\n    }\r\n\r\n    /**\r\n     * Update the course index collapsed attribute of some sections.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the affected section ids\r\n     * @param {boolean} collapsed the new collapsed value\r\n     */\r\n    async sectionIndexCollapsed(stateManager, sectionIds, collapsed) {\r\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'indexcollapsed', sectionIds, collapsed);\r\n        if (!collapsedIds) {\r\n            return;\r\n        }\r\n        const course = stateManager.get('course');\r\n        await this._callEditWebservice('section_index_collapsed', course.id, collapsedIds);\r\n    }\r\n\r\n    /**\r\n     * Update the course content collapsed attribute of some sections.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {array} sectionIds the affected section ids\r\n     * @param {boolean} collapsed the new collapsed value\r\n     */\r\n    async sectionContentCollapsed(stateManager, sectionIds, collapsed) {\r\n        const collapsedIds = this._updateStateSectionPreference(stateManager, 'contentcollapsed', sectionIds, collapsed);\r\n        if (!collapsedIds) {\r\n            return;\r\n        }\r\n        const course = stateManager.get('course');\r\n        await this._callEditWebservice('section_content_collapsed', course.id, collapsedIds);\r\n    }\r\n\r\n    /**\r\n     * Private batch update for a section preference attribute.\r\n     *\r\n     * @param {StateManager} stateManager the current state manager\r\n     * @param {string} preferenceName the preference name\r\n     * @param {array} sectionIds the affected section ids\r\n     * @param {boolean} preferenceValue the new preferenceValue value\r\n     * @return {Number[]|null} sections ids with the preference value true or null if no update is required\r\n     */\r\n    _updateStateSectionPreference(stateManager, preferenceName, sectionIds, preferenceValue) {\r\n        stateManager.setReadOnly(false);\r\n        const affectedSections = new Set();\r\n        // Check if we need to update preferences.\r\n        sectionIds.forEach(sectionId => {\r\n            const section = stateManager.get('section', sectionId);\r\n            if (section === undefined) {\r\n                return null;\r\n            }\r\n            const newValue = preferenceValue ?? section[preferenceName];\r\n            if (section[preferenceName] != newValue) {\r\n                section[preferenceName] = newValue;\r\n                affectedSections.add(section.id);\r\n            }\r\n        });\r\n        stateManager.setReadOnly(true);\r\n        if (affectedSections.size == 0) {\r\n            return null;\r\n        }\r\n        // Get all collapsed section ids.\r\n        const collapsedSectionIds = [];\r\n        const state = stateManager.state;\r\n        state.section.forEach(section => {\r\n            if (section[preferenceName]) {\r\n                collapsedSectionIds.push(section.id);\r\n            }\r\n        });\r\n        return collapsedSectionIds;\r\n    }\r\n\r\n    /**\r\n     * Get updated state data related to some cm ids.\r\n     *\r\n     * @method cmState\r\n     * @param {StateManager} stateManager the current state\r\n     * @param {array} cmids the list of cm ids to update\r\n     */\r\n    async cmState(stateManager, cmids) {\r\n        this.cmLock(stateManager, cmids, true);\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('cm_state', course.id, cmids);\r\n        stateManager.processUpdates(updates);\r\n        this.cmLock(stateManager, cmids, false);\r\n    }\r\n\r\n    /**\r\n     * Get updated state data related to some section ids.\r\n     *\r\n     * @method sectionState\r\n     * @param {StateManager} stateManager the current state\r\n     * @param {array} sectionIds the list of section ids to update\r\n     */\r\n    async sectionState(stateManager, sectionIds) {\r\n        this.sectionLock(stateManager, sectionIds, true);\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('section_state', course.id, sectionIds);\r\n        stateManager.processUpdates(updates);\r\n        this.sectionLock(stateManager, sectionIds, false);\r\n    }\r\n\r\n    /**\r\n     * Get the full updated state data of the course.\r\n     *\r\n     * @param {StateManager} stateManager the current state\r\n     */\r\n    async courseState(stateManager) {\r\n        const course = stateManager.get('course');\r\n        const updates = await this._callEditWebservice('course_state', course.id);\r\n        stateManager.processUpdates(updates);\r\n    }\r\n\r\n}\r\n"],"names":["action","courseId","ids","targetSectionId","targetCmId","args","courseid","targetsectionid","targetcmid","ajaxresult","ajax","call","methodname","JSON","parse","stateManager","sectionIds","course","get","sectionLock","updates","this","_callEditWebservice","id","processUpdates","cmIds","cmLock","init","addUpdateTypes","prepareFields","_prepareFields","updateName","fields","locked","_sectionBasicAction","_cmBasicAction","cmids","Error","cmDrag","dragValue","setPageItem","_setElementsValue","sectionDrag","cmCompletion","complete","newValue","lockValue","name","fieldName","setReadOnly","forEach","element","type","isStatic","newPageItem","undefined","pageItem","sectionId","sectionid","unlockAll","state","section","cm","collapsed","collapsedIds","_updateStateSectionPreference","preferenceName","preferenceValue","affectedSections","Set","add","size","collapsedSectionIds","push"],"mappings":";;;;;;;;iMAuC8BA,OAAQC,SAAUC,IAAKC,gBAAiBC,kBACxDC,KAAO,CACTL,OAAAA,OACAM,SAAUL,SACVC,IAAAA,KAEAC,kBACAE,KAAKE,gBAAkBJ,iBAEvBC,aACAC,KAAKG,WAAaJ,gBAElBK,iBAAmBC,cAAKC,KAAK,CAAC,CAC9BC,WAAY,kCACZP,KAAAA,QACA,UACGQ,KAAKC,MAAML,sCAWIM,aAAcf,OAAQgB,WAAYb,gBAAiBC,kBACnEa,OAASF,aAAaG,IAAI,eAC3BC,YAAYJ,aAAcC,YAAY,SACrCI,cAAgBC,KAAKC,oBACvBtB,OACAiB,OAAOM,GACPP,WACAb,gBACAC,YAEJW,aAAaS,eAAeJ,cACvBD,YAAYJ,aAAcC,YAAY,wBAW1BD,aAAcf,OAAQyB,MAAOtB,gBAAiBC,kBACzDa,OAASF,aAAaG,IAAI,eAC3BQ,OAAOX,aAAcU,OAAO,SAC3BL,cAAgBC,KAAKC,oBACvBtB,OACAiB,OAAOM,GACPE,MACAtB,gBACAC,YAEJW,aAAaS,eAAeJ,cACvBM,OAAOX,aAAcU,OAAO,GAUrCE,KAAKZ,cAEDA,aAAaa,eAAe,CACxBC,cAAeR,KAAKS,iBAc5BA,eAAef,aAAcgB,WAAYC,eAErCA,OAAOC,QAAS,EACTD,yBAQOjB,aAAcC,kBACtBK,KAAKa,oBAAoBnB,aAAc,eAAgBC,8BAQ/CD,aAAcC,kBACtBK,KAAKa,oBAAoBnB,aAAc,eAAgBC,yBAQpDD,aAAcU,aACjBJ,KAAKc,eAAepB,aAAc,UAAWU,oBAQ1CV,aAAcU,aACjBJ,KAAKc,eAAepB,aAAc,UAAWU,uBAQvCV,aAAcU,aACpBJ,KAAKc,eAAepB,aAAc,aAAcU,oBAkB7CV,aAAcqB,MAAOjC,gBAAiBC,gBAC1CD,kBAAoBC,iBACf,IAAIiC,sEAERpB,OAASF,aAAaG,IAAI,eAC3BQ,OAAOX,aAAcqB,OAAO,SAC3BhB,cAAgBC,KAAKC,oBAAoB,UAAWL,OAAOM,GAAIa,MAAOjC,gBAAiBC,YAC7FW,aAAaS,eAAeJ,cACvBM,OAAOX,aAAcqB,OAAO,qBAUnBrB,aAAcC,WAAYb,qBACnCA,sBACK,IAAIkC,6DAERpB,OAASF,aAAaG,IAAI,eAC3BC,YAAYJ,aAAcC,YAAY,SACrCI,cAAgBC,KAAKC,oBAAoB,eAAgBL,OAAOM,GAAIP,WAAYb,iBACtFY,aAAaS,eAAeJ,cACvBD,YAAYJ,aAAcC,YAAY,oBAS9BD,aAAcZ,iBACtBA,kBACDA,gBAAkB,SAEhBc,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,cAAeL,OAAOM,GAAI,GAAIpB,iBAC7EY,aAAaS,eAAeJ,6BASZL,aAAcC,kBACxBC,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,iBAAkBL,OAAOM,GAAIP,YAC5ED,aAAaS,eAAeJ,SAUhCkB,OAAOvB,aAAcU,MAAOc,gBACnBC,YAAYzB,mBACZ0B,kBAAkB1B,aAAc,KAAMU,MAAO,WAAYc,WAUlEG,YAAY3B,aAAcC,WAAYuB,gBAC7BC,YAAYzB,mBACZ0B,kBAAkB1B,aAAc,UAAWC,WAAY,WAAYuB,WAU5EI,aAAa5B,aAAcU,MAAOmB,gBACxBC,SAAYD,SAAY,EAAI,OAC7BH,kBAAkB1B,aAAc,KAAMU,MAAO,kBAAmBoB,4BAQvD9B,aAAcU,aACtBJ,KAAKc,eAAepB,aAAc,eAAgBU,wBAQ3CV,aAAcU,aACrBJ,KAAKc,eAAepB,aAAc,cAAeU,OAU3DC,OAAOX,aAAcU,MAAOqB,gBACnBL,kBAAkB1B,aAAc,KAAMU,MAAO,SAAUqB,WAUhE3B,YAAYJ,aAAcC,WAAY8B,gBAC7BL,kBAAkB1B,aAAc,UAAWC,WAAY,SAAU8B,WAG1EL,kBAAkB1B,aAAcgC,KAAM7C,IAAK8C,UAAWH,UAClD9B,aAAakC,aAAY,GACzB/C,IAAIgD,SAAS3B,WACH4B,QAAUpC,aAAaG,IAAI6B,KAAMxB,IACnC4B,UACAA,QAAQH,WAAaH,aAG7B9B,aAAakC,aAAY,GAqB7BT,YAAYzB,aAAcqC,KAAM7B,GAAI8B,cAC5BC,oBACSC,IAATH,OACAE,YAAcvC,aAAaG,IAAIkC,KAAM7B,KAChC+B,oBAITvC,aAAakC,aAAY,SAEnBhC,OAASF,aAAaG,IAAI,UAChCD,OAAOuC,SAAW,KAEdF,cACArC,OAAOuC,SAAW,CACdjC,GAAAA,GACA6B,KAAAA,KACAK,UAAoB,WAARL,KAAqBE,YAAY/B,GAAK+B,YAAYI,UAC9DL,SAAAA,WAGRtC,aAAakC,aAAY,GAQ7BU,UAAU5C,oBACA6C,MAAQ7C,aAAa6C,MAC3B7C,aAAakC,aAAY,GACzBW,MAAMC,QAAQX,SAASW,UACnBA,QAAQ5B,QAAS,KAErB2B,MAAME,GAAGZ,SAASY,KACdA,GAAG7B,QAAS,KAEhBlB,aAAakC,aAAY,+BAUDlC,aAAcC,WAAY+C,iBAC5CC,aAAe3C,KAAK4C,8BAA8BlD,aAAc,iBAAkBC,WAAY+C,eAC/FC,0BAGC/C,OAASF,aAAaG,IAAI,gBAC1BG,KAAKC,oBAAoB,0BAA2BL,OAAOM,GAAIyC,4CAU3CjD,aAAcC,WAAY+C,iBAC9CC,aAAe3C,KAAK4C,8BAA8BlD,aAAc,mBAAoBC,WAAY+C,eACjGC,0BAGC/C,OAASF,aAAaG,IAAI,gBAC1BG,KAAKC,oBAAoB,4BAA6BL,OAAOM,GAAIyC,cAY3EC,8BAA8BlD,aAAcmD,eAAgBlD,WAAYmD,iBACpEpD,aAAakC,aAAY,SACnBmB,iBAAmB,IAAIC,OAE7BrD,WAAWkC,SAAQO,kBACTI,QAAU9C,aAAaG,IAAI,UAAWuC,mBAC5BF,IAAZM,eACO,WAELhB,SAAWsB,MAAAA,gBAAAA,gBAAmBN,QAAQK,gBACxCL,QAAQK,iBAAmBrB,WAC3BgB,QAAQK,gBAAkBrB,SAC1BuB,iBAAiBE,IAAIT,QAAQtC,QAGrCR,aAAakC,aAAY,GACI,GAAzBmB,iBAAiBG,YACV,WAGLC,oBAAsB,UACdzD,aAAa6C,MACrBC,QAAQX,SAAQW,UACdA,QAAQK,iBACRM,oBAAoBC,KAAKZ,QAAQtC,OAGlCiD,kCAUGzD,aAAcqB,YACnBV,OAAOX,aAAcqB,OAAO,SAC3BnB,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,WAAYL,OAAOM,GAAIa,OACtErB,aAAaS,eAAeJ,cACvBM,OAAOX,aAAcqB,OAAO,sBAUlBrB,aAAcC,iBACxBG,YAAYJ,aAAcC,YAAY,SACrCC,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,gBAAiBL,OAAOM,GAAIP,YAC3ED,aAAaS,eAAeJ,cACvBD,YAAYJ,aAAcC,YAAY,qBAQ7BD,oBACRE,OAASF,aAAaG,IAAI,UAC1BE,cAAgBC,KAAKC,oBAAoB,eAAgBL,OAAOM,IACtER,aAAaS,eAAeJ"}