{"version":3,"file":"dndcmitem.min.js","sources":["../../../src/local/courseeditor/dndcmitem.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\r\n//\r\n// Moodle is free software: you can redistribute it and/or modify\r\n// it under the terms of the GNU General Public License as published by\r\n// the Free Software Foundation, either version 3 of the License, or\r\n// (at your option) any later version.\r\n//\r\n// Moodle is distributed in the hope that it will be useful,\r\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n// GNU General Public License for more details.\r\n//\r\n// You should have received a copy of the GNU General Public License\r\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\n/**\r\n * Course index cm component.\r\n *\r\n * This component is used to control specific course modules interactions like drag and drop\r\n * in both course index and course content.\r\n *\r\n * @module     core_courseformat/local/courseeditor/dndcmitem\r\n * @class      core_courseformat/local/courseeditor/dndcmitem\r\n * @copyright  2021 Ferran Recio <ferran@moodle.com>\r\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\r\n */\r\n\r\nimport {BaseComponent, DragDrop} from 'core/reactive';\r\n\r\nexport default class extends BaseComponent {\r\n\r\n    /**\r\n     * Configure the component drag and drop.\r\n     *\r\n     * @param {number} cmid course module id\r\n     */\r\n    configDragDrop(cmid) {\r\n\r\n        this.id = cmid;\r\n\r\n        // Drag and drop is only available for components compatible course formats.\r\n        if (this.reactive.isEditing && this.reactive.supportComponents) {\r\n            // Init element drag and drop.\r\n            this.dragdrop = new DragDrop(this);\r\n            // Save dropzone classes.\r\n            this.classes = this.dragdrop.getClasses();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Remove all subcomponents dependencies.\r\n     */\r\n    destroy() {\r\n        if (this.dragdrop !== undefined) {\r\n            this.dragdrop.unregister();\r\n        }\r\n    }\r\n\r\n    // Drag and drop methods.\r\n\r\n    /**\r\n     * The element drop start hook.\r\n     *\r\n     * @param {Object} dropdata the dropdata\r\n     */\r\n    dragStart(dropdata) {\r\n        this.reactive.dispatch('cmDrag', [dropdata.id], true);\r\n    }\r\n\r\n    /**\r\n     * The element drop end hook.\r\n     *\r\n     * @param {Object} dropdata the dropdata\r\n     */\r\n    dragEnd(dropdata) {\r\n        this.reactive.dispatch('cmDrag', [dropdata.id], false);\r\n    }\r\n\r\n    /**\r\n     * Get the draggable data of this component.\r\n     *\r\n     * @returns {Object} exported course module drop data\r\n     */\r\n    getDraggableData() {\r\n        const exporter = this.reactive.getExporter();\r\n        return exporter.cmDraggableData(this.reactive.state, this.id);\r\n    }\r\n\r\n    /**\r\n     * Validate if the drop data can be dropped over the component.\r\n     *\r\n     * @param {Object} dropdata the exported drop data.\r\n     * @returns {boolean}\r\n     */\r\n    validateDropData(dropdata) {\r\n        return dropdata?.type === 'cm';\r\n    }\r\n\r\n    /**\r\n     * Display the component dropzone.\r\n     *\r\n     * @param {Object} dropdata the accepted drop data\r\n     */\r\n    showDropZone(dropdata) {\r\n        // If we are the next cmid of the dragged element we accept the drop because otherwise it\r\n        // will get captured by the section. However, we won't trigger any mutation.\r\n        if (dropdata.nextcmid != this.id && dropdata.id != this.id) {\r\n            this.element.classList.add(this.classes.DROPUP);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Hide the component dropzone.\r\n     */\r\n    hideDropZone() {\r\n        this.element.classList.remove(this.classes.DROPUP);\r\n    }\r\n\r\n    /**\r\n     * Drop event handler.\r\n     *\r\n     * @param {Object} dropdata the accepted drop data\r\n     */\r\n    drop(dropdata) {\r\n        // Call the move mutation if necessary.\r\n        if (dropdata.id != this.id && dropdata.nextcmid != this.id) {\r\n            this.reactive.dispatch('cmMove', [dropdata.id], null, this.id);\r\n        }\r\n    }\r\n\r\n}\r\n"],"names":["BaseComponent","configDragDrop","cmid","id","this","reactive","isEditing","supportComponents","dragdrop","DragDrop","classes","getClasses","destroy","undefined","unregister","dragStart","dropdata","dispatch","dragEnd","getDraggableData","getExporter","cmDraggableData","state","validateDropData","type","showDropZone","nextcmid","element","classList","add","DROPUP","hideDropZone","remove","drop"],"mappings":";;;;;;;;;;;;uBA6B6BA,wBAOzBC,eAAeC,WAENC,GAAKD,KAGNE,KAAKC,SAASC,WAAaF,KAAKC,SAASE,yBAEpCC,SAAW,IAAIC,mBAASL,WAExBM,QAAUN,KAAKI,SAASG,cAOrCC,eAC0BC,IAAlBT,KAAKI,eACAA,SAASM,aAWtBC,UAAUC,eACDX,SAASY,SAAS,SAAU,CAACD,SAASb,KAAK,GAQpDe,QAAQF,eACCX,SAASY,SAAS,SAAU,CAACD,SAASb,KAAK,GAQpDgB,0BACqBf,KAAKC,SAASe,cACfC,gBAAgBjB,KAAKC,SAASiB,MAAOlB,KAAKD,IAS9DoB,iBAAiBP,gBACa,QAAnBA,MAAAA,gBAAAA,SAAUQ,MAQrBC,aAAaT,UAGLA,SAASU,UAAYtB,KAAKD,IAAMa,SAASb,IAAMC,KAAKD,SAC/CwB,QAAQC,UAAUC,IAAIzB,KAAKM,QAAQoB,QAOhDC,oBACSJ,QAAQC,UAAUI,OAAO5B,KAAKM,QAAQoB,QAQ/CG,KAAKjB,UAEGA,SAASb,IAAMC,KAAKD,IAAMa,SAASU,UAAYtB,KAAKD,SAC/CE,SAASY,SAAS,SAAU,CAACD,SAASb,IAAK,KAAMC,KAAKD"}